/**
 * File: GUI.java Author: Milagros Sasieta Date: 6/16/2019 Purpose: Create the
 * UI for the main profile overview and methods that control functionality of
 * this window.
 */
package com.thegrocery.thegroceryfrugal.GUI;

import com.thegrocery.thegroceryfrugal.HibernateUtil;
import com.thegrocery.thegroceryfrugal.Models.Ingredients;
import com.thegrocery.thegroceryfrugal.Models.Users;
import com.thegrocery.thegroceryfrugal.Models.GroceryList;
import com.thegrocery.thegroceryfrugal.Models.Recipe;
import com.thegrocery.thegroceryfrugal.Utility.IngredientUtility;
import com.thegrocery.thegroceryfrugal.Utility.UserUtility;
import com.thegrocery.thegroceryfrugal.Utility.GroceryListUtility;
import com.thegrocery.thegroceryfrugal.Utility.RecipeUtility;
import java.awt.BorderLayout;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.hibernate.Session;
import org.hibernate.Transaction;

public class GUI extends javax.swing.JFrame {

    public GUI(Users user) {
        this.user = user;
        initComponents();
        loadRecipes();
        loadGroceryList();
        
    }    

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        displayPane = new javax.swing.JTextArea();
        modifyBtn = new javax.swing.JButton();
        newBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        openBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dropdownList = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchTextArea = new javax.swing.JTextArea();
        searchBtn = new javax.swing.JButton();
        RecipeRadBtn = new javax.swing.JRadioButton();
        GroceryListRadBtn = new javax.swing.JRadioButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jScrollPane2 = new javax.swing.JScrollPane();

        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Grocery Frugal");
        recipes = new DefaultMutableTreeNode("Recipes");
        groceryLists = new DefaultMutableTreeNode("Grocery Lists");        
        root.add(recipes);
        root.add(groceryLists);

        treeDisplay = new javax.swing.JTree(root);
        treeDisplay.setShowsRootHandles(true);
        treeDisplay.setRootVisible(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Overview");
        setBackground(new java.awt.Color(62, 69, 81));
        setForeground(new java.awt.Color(62, 69, 81));

        displayPane.setColumns(20);
        displayPane.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        displayPane.setRows(5);
        jScrollPane3.setViewportView(displayPane);

        modifyBtn.setBackground(new java.awt.Color(186, 207, 242));
        modifyBtn.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        modifyBtn.setText("Modify Existing");
        modifyBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        modifyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyBtnActionPerformed(evt);
            }
        });

        newBtn.setBackground(new java.awt.Color(186, 207, 242));
        newBtn.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        newBtn.setText("New");
        newBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(186, 207, 242));
        deleteBtn.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        logoutBtn.setBackground(new java.awt.Color(186, 207, 242));
        logoutBtn.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        logoutBtn.setText("Log Out");
        logoutBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel2.setText("Selection Display:");

        openBtn.setBackground(new java.awt.Color(186, 207, 242));
        openBtn.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        openBtn.setText("Open Existing");
        openBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        openBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel1.setText("Search Existing Files:");

        dropdownList.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        dropdownList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Recipe", "Ingredient", "Grocery List"}));
        dropdownList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropdownListActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        searchTextArea.setColumns(20);
        searchTextArea.setRows(5);
        jScrollPane1.setViewportView(searchTextArea);

        searchBtn.setBackground(new java.awt.Color(186, 207, 242));
        searchBtn.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        searchBtn.setText("Search!");
        searchBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        RecipeRadBtn.setText("Recipe");
        RecipeRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecipeRadBtnActionPerformed(evt);
            }
        });

        GroceryListRadBtn.setText("Grocery List");
        GroceryListRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroceryListRadBtnActionPerformed(evt);
            }
        });

        ButtonGroup radioGroup = new ButtonGroup();
        radioGroup.add(RecipeRadBtn);
        radioGroup.add(GroceryListRadBtn);

        treeDisplay.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeDisplayValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(treeDisplay);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel1)
                                                        .addGap(8, 8, 8)
                                                        .addComponent(dropdownList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(searchBtn)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(208, 208, 208)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(GroceryListRadBtn)
                                .addComponent(newBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(openBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(modifyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(RecipeRadBtn))
                        .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(191, 191, 191)
                                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel1)
                                                        .addComponent(dropdownList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(searchBtn)
                                                        .addComponent(GroceryListRadBtn)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGap(12, 12, 12)
                                                        .addComponent(jLabel2))
                                                .addGroup(layout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(RecipeRadBtn)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jScrollPane2)
                                                .addComponent(jScrollPane3)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(newBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(openBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(modifyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Launches window for creating a new recipe or grocery list, depending on
     * radio button selection.
     *
     * @param evt Action event initiated by user
     */
    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        if (RecipeRadBtn.isSelected()) {
            NewRecipe nr = new NewRecipe(user, recipes, treeDisplay);
            nr.setGUIParent(this);
            nr.setVisible(true);
            nr.setAutoRequestFocus(true);
            nr.setLocationRelativeTo(null);
            nr.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        } else if (GroceryListRadBtn.isSelected()) {
            NewGroceryList ngl = new NewGroceryList(user, groceryLists, treeDisplay);
            ngl.setVisible(true);
            ngl.setAutoRequestFocus(true);
            ngl.setLocationRelativeTo(null);
            ngl.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        }
    }//GEN-LAST:event_newBtnActionPerformed

    /**
     * Logs user out of their account and displays a confirmation window before
     * moving user back to main log in window.
     *
     * @param evt Action event initiated by user
     */
    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        this.setVisible(false);
        JOptionPane.showMessageDialog(null, "Successfully logged out of account.", "Success", JOptionPane.INFORMATION_MESSAGE);
        Login login = new Login();
        login.setVisible(true);
        login.setLocationRelativeTo(null);
    }//GEN-LAST:event_logoutBtnActionPerformed

    /**
     * Author: Amanda Kok Displays recipe or grocery list selected from jtree in
     * displayPane.
     *
     * @param evt Action event initiated by user
     */
    private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBtnActionPerformed
        //needs to open existing list or recipe and display folder in the Jtree area, and display ingredients or recipe in view selection area 
        displayPane.setWrapStyleWord(true);
        displayPane.setLineWrap(true);
        displayPane.setText(null);
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) treeDisplay.getLastSelectedPathComponent();
		if (selectedNode == null) {
			return;
		}
		Object selectedObject = selectedNode.getUserObject();
        if (RecipeRadBtn.isSelected()) {		
			if (!(selectedObject instanceof Recipe)) {
				return;
			}
			Recipe recipe = (Recipe) selectedObject;

			StringBuilder content = new StringBuilder();
			content.append(recipe.getName() + "\n");
			if (recipe.getSteps() != null) {
				content.append("========== STEPS ========== \n" + recipe.getSteps() + "\n");
			}
			if (recipe.getUser() != null) {
				content.append("========== USERS ========== \n" + recipe.getUser().getUsername() + "\n");
			}
            
            displayPane.append(content.toString() + "\n");
        } else if (GroceryListRadBtn.isSelected()) {
        	if (!(selectedObject instanceof GroceryList)) {
				return;
			}
        	GroceryList groceryList = (GroceryList) selectedObject;

			StringBuilder content = new StringBuilder();
			content.append(groceryList.getTitle() + "\n");
			if (groceryList.getRecipe_id() != null) {
				content.append("========== RECIPE ========== \n" + groceryList.getRecipe_id() + "\n");
			}
			if (groceryList.getUser_id() != null) {
				content.append("========== USERS ========== \n" + groceryList.getUser_id().getUsername() + "\n");
			}
            
            displayPane.append(content.toString() + "\n");
        } else {
            JOptionPane.showMessageDialog(null, "Please select a radio button for the object you are attempting to open", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_openBtnActionPerformed

    /**
     * Opens a grocery list or recipe for user to modify. Saves changes to
     * database.
     *
     * @param evt Action event initiated by user
     */
    private void modifyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyBtnActionPerformed
    	DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) treeDisplay.getLastSelectedPathComponent();
		if (selectedNode == null) {
			return;
		}
		Object selectedObject = selectedNode.getUserObject();
        if (RecipeRadBtn.isSelected()) {		
			if (!(selectedObject instanceof Recipe)) {
				return;
			}
            ModifyRecipe mr = new ModifyRecipe((Recipe) selectedObject, user);
            mr.setVisible(true);
            mr.setAutoRequestFocus(true);
            mr.setLocationRelativeTo(null);
            mr.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		} else if (GroceryListRadBtn.isSelected()) {
			if (!(selectedObject instanceof GroceryList)) {
				return;
			}
            ModifyGroceryList mr = new ModifyGroceryList();
            mr.setVisible(true);
            mr.setAutoRequestFocus(true);
            mr.setLocationRelativeTo(null);
            mr.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		} else {
			JOptionPane.showMessageDialog(null, "Please select a radio button for the object you are attempting to open", "Error", JOptionPane.INFORMATION_MESSAGE);
		}       
        
        //Recipe recipe = RecipeUtility.getRecipe(Arrays.toString(paths).split(",")[-1]);
        
    }//GEN-LAST:event_modifyBtnActionPerformed

    /**
     * Deletes selected grocery list or recipe from database.
     *
     * @param evt Action event initiated by user
     */
    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
		if (RecipeRadBtn.isSelected()) {
			Object selectedObject = selectedNode.getUserObject();
			if (selectedObject instanceof Recipe) {
				Recipe recipe = (Recipe) selectedObject;
				if (recipe.getUser() == null || !recipe.getUser().equals(user)) {
					JOptionPane.showMessageDialog(this, "Cannot delete a recipe belongs to others");
					return;
				}
				int result = JOptionPane.showConfirmDialog(this,
						String.format("Do you want to delete the receipt %s", recipe.getName()));
				if (result != JOptionPane.YES_OPTION) {
					return;
				}
				try {
					RecipeUtility.deleteRecipe(recipe, user);
					JOptionPane.showMessageDialog(this, String.format("The recipe %s was deleted", recipe.getName()));
					loadRecipes();
				} catch (Exception ex) {
					JOptionPane.showMessageDialog(this, String.format(
							"The recipe %s was deleted unsuccesfully, error: %s", recipe.getName(), ex.getMessage()));
				}
			}
		} else if (GroceryListRadBtn.isSelected()) {
			String[] split = selectedNodeString.split(" ");
			String listID = split[split.length - 1];

			StringBuilder listTitle = new StringBuilder();
			for (int i = 0; i < split.length - 1; i++) {
				listTitle.append(split[i]);
			}

			final JPanel panel = new JPanel(new BorderLayout());
			JLabel warning = new JLabel("This will permanantly delete Grocery List " + listTitle.toString()
					+ ".  Do you wish to continue?");
			JRadioButton yesRdBtn = new JRadioButton("Confirm Delete");
			yesRdBtn.setActionCommand("Delete");
			JRadioButton noRdBtn = new JRadioButton("Do Not Delete");
			noRdBtn.setActionCommand("Stop");

			ButtonGroup confirmBtnGroup = new ButtonGroup();
			confirmBtnGroup.add(yesRdBtn);
			confirmBtnGroup.add(noRdBtn);
			JPanel buttonPanel = new JPanel();
			buttonPanel.add(yesRdBtn);
			buttonPanel.add(noRdBtn);

			panel.add(warning, BorderLayout.CENTER);
			panel.add(buttonPanel, BorderLayout.SOUTH);

			JOptionPane.showMessageDialog(null, panel);

			String deleteResponse = confirmBtnGroup.getSelection().getActionCommand();

			switch (deleteResponse) {
			case "Delete":
				boolean success = GroceryListUtility.deleteGroceryList(Long.parseLong(listID));

				if (success) {
					JOptionPane.showMessageDialog(null, listTitle.toString() + " was deleted", "Confirm List Deleted",
							JOptionPane.INFORMATION_MESSAGE);

					DefaultTreeModel treeModel = (DefaultTreeModel) treeDisplay.getModel();
					treeModel.removeNodeFromParent(selectedNode);
				} else {
					JOptionPane.showMessageDialog(null, "Unknown error deleting " + listTitle.toString(), "Error",
							JOptionPane.ERROR_MESSAGE);
				}
				break;
			case "Stop":
				displayPane.append("Nope");
				JOptionPane.showMessageDialog(null, "List not deleted", "No Action Taken",
						JOptionPane.INFORMATION_MESSAGE);
				break;
			}

		} else {
			JOptionPane.showMessageDialog(null,
					"Please select a radio button for the object you are attempting to delete.", "Error",
					JOptionPane.INFORMATION_MESSAGE);
		}
        

    }//GEN-LAST:event_deleteBtnActionPerformed

    /**
     * Controls whether user is searching by name or ingredient
     *
     * @param evt Action event initiated by user
     */
    private void dropdownListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropdownListActionPerformed

    }//GEN-LAST:event_dropdownListActionPerformed

    /**
     * Searches recipes using text in searchTextArea. Will search recipes either
     * by name or ingredient, depending on drop down selection.
     *
     * @param evt Action event initiated by user
     */
    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        //run the search
        displayPane.setWrapStyleWord(true);
        displayPane.setLineWrap(true);
        if(dropdownList.getSelectedItem() == "Ingredient"){
            displayPane.setText(null);
            List<Ingredients> ingredients = IngredientUtility.findIngredientsByName(searchTextArea.getText());
            for (Iterator iter = ingredients.iterator(); iter.hasNext();) {
                Ingredients ingredient = (Ingredients) iter.next();
                displayPane.append(ingredient.toString());
            }
        } else if (dropdownList.getSelectedItem() == "Recipe") {
            displayPane.setText(null);
            List<Recipe> recipes = RecipeUtility.findRecipeByName(searchTextArea.getText());
            
            try (Session session = HibernateUtil.getSessionFactory().getCurrentSession()) { 
                Transaction tx = session.beginTransaction();
                for (Iterator iter = recipes.iterator(); iter.hasNext();) {
                    Recipe recipe = (Recipe) iter.next();
                    displayPane.append(recipe.toString(tx, session));
                }
            } 
        } else if (dropdownList.getSelectedItem() == "Grocery List") {

        }
    }//GEN-LAST:event_searchBtnActionPerformed

    /**
     * Controls whether actions are taken on recipes.
     *
     * @param evt Action event initiated by user
     */
    private void RecipeRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecipeRadBtnActionPerformed
        //specifies to draw from recipe database
    }//GEN-LAST:event_RecipeRadBtnActionPerformed

    /**
     * Controls whether actions are taken on grocery lists.
     *
     * @param evt Action event initiated by user
     */
    private void GroceryListRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroceryListRadBtnActionPerformed
        //specifies to draw from grocery database
    }//GEN-LAST:event_GroceryListRadBtnActionPerformed

    /**
     * Initiates and changes nodes in the jtree display
     *
     * @param evt Action event initiated by user
     */
    private void treeDisplayValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeDisplayValueChanged
        //used to initiate and change nodes in the tree
    	if (treeDisplay.getLastSelectedPathComponent() == null) {
    		return;
    	}
        selectedNodeString = treeDisplay.getLastSelectedPathComponent().toString();
        selectedNode = (DefaultMutableTreeNode) treeDisplay.getLastSelectedPathComponent();

    }//GEN-LAST:event_treeDisplayValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI(UserUtility.getUser("default")).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton GroceryListRadBtn;
    private javax.swing.JRadioButton RecipeRadBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextArea displayPane;
    private javax.swing.JComboBox<String> dropdownList;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JButton modifyBtn;
    private javax.swing.JButton newBtn;
    private javax.swing.JButton openBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextArea searchTextArea;
    private javax.swing.JTree treeDisplay;
    private Users user;
    private DefaultMutableTreeNode recipes, groceryLists, selectedNode;
    private String selectedNodeString;
    // End of variables declaration//GEN-END:variables

	protected void loadRecipes() {
		recipes.removeAllChildren();
		List<Recipe> receiptElements = RecipeUtility.listAllUserAndDefaultRecipes(user);
		for (Recipe rep : receiptElements) {
			recipes.add(new DefaultMutableTreeNode(rep));
		}
		DefaultTreeModel model = (DefaultTreeModel) treeDisplay.getModel();
		DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
		model.reload(root);
		treeDisplay.setModel(model);
	} 
	private void loadGroceryList() {
    	long userId = user.getId();
    	groceryLists.removeAllChildren();
        List<GroceryList> userLists = GroceryListUtility.gatherUserGroceryLists(userId);
        for (GroceryList list : userLists) {
            DefaultMutableTreeNode listNode = new DefaultMutableTreeNode(list);
            groceryLists.add(listNode);
        }
        DefaultTreeModel model = (DefaultTreeModel) treeDisplay.getModel();
		DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
		model.reload(root);
		treeDisplay.setModel(model);
	}
}//end GUI class
